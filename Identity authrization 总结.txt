视频链接：https://www.youtube.com/watch?v=93ssXlCPcuI
1.新建Asp.net MVC
2.使用identity authorizing需要安装以下包
     1. Microsoft.EntityFrameworkCore
     2. Microsoft.AspNetCore.Identity.EntityFrameworkCore
     3. Microsoft.EntityFrameworkCore.Tools
     4. Microsoft.EntityFrameworkCore.SqlServer
3.为MVC.Project新建目录Data并新增类:
    public class AppDbContext: IdentityDbContext<AppUser>
    {
        public AppDbContext(DbContextOptions<AppDbContext> options):base(options) 
        { 

        }
    }
4.在model目录新增一个类（为了增加字段，如果不增加字段，3的IdentityDbContext<AppUser>可以直接使用IdentityUser类替换AppUser.
    public class AppUser : IdentityUser
    {
        [StringLength(100)]
        [MaxLength(100)]
        [Required]
        public string? Name { get; set; }
        public string? Address {  get; set; }
    }
5.在appsettings.json增加链接字符串：
  "ConnectionStrings": {
    "default": "Data Source=.;Initial Catalog=CustomIdentityDB;User ID=sa;Password=kensindy;TrustServerCertificate=true;"
  }
6.在Program.cs注册DbContext:
builder.Services.AddDbContext<AppDbContext>(options => 
        options.UseSqlServer(builder.Configuration.GetConnectionString("default")));
builder.Services.AddIdentity<AppUser, IdentityRole>(
options =>
{
    options.Password.RequiredUniqueChars = 0;
    options.Password.RequireUppercase = false;
    options.Password.RequiredLength = 8;
    options.Password.RequireNonAlphanumeric = false;
    options.Password.RequireLowercase = false;
})
.AddEntityFrameworkStores<AppDbContext>().AddDefaultTokenProviders();

7.然后添加NewScaffoldedItem-添加identity-dbcontext选择AppDbContext

8.使用菜单Tools->nuget package manager->package manager console分别执行：
add-migration initial   //initial是migration Name，执行成功后在Migrations目录生成xxxxxx_Initial.cs and xxxxxx_Initial.Designer.cs ，手动删除这些文件可以移除这个名称，也可以使用Remove-Migration 命令移除这个名称

update-database
之后在SQL可以看到数据库和表（数据名在connectionstring，如果没有则会自动建立)，然后在项目里会出现新目录：Migrations，在目录里有**_initial.cs文件

9.为项目建立新目录：ViewModels，并添加2个VM
    public class LoginVM
    {
        [Required(ErrorMessage ="Username is required")]
        public string? Username { get; set; }

        [Required(ErrorMessage = "Password is required")]
		[DataType(DataType.Password)]
		public string? Password { get; set; }

        [Display (Name = "Remember Me")]
        public bool RememberMe { get; set; }

    }

public class RegisterVM
{
    [Required]
    public string? Name { get; set; }

    [Required]
    [DataType(DataType.EmailAddress)]
    public string? Email { get; set; }

    [Required]
    [DataType(DataType.Password)]
    public string? Password { get; set; }

    [Compare("Password", ErrorMessage = "Password don't match.")]
    [Display(Name = "Confirm password")]
	[DataType(DataType.Password)]
	public string? ConfirmPassword { get; set; }

    [DataType(DataType.MultilineText)]
    public string? Address { get; set; }
}
10.在controller目录新增空Controller，并且完成以下内容：
public class AccountController : Controller
{
    private readonly SignInManager<AppUser> signInManager;
    private readonly UserManager<AppUser> userManager;

    public AccountController(SignInManager<AppUser> sm, UserManager<AppUser> um)
    {
        this.signInManager = sm;
        this.userManager = um;
    }
    public IActionResult Login()//这个是必须有的，不然Login.cshtml页面不显示 
	{
        return View();
    }

    [HttpPost]
	public async Task<IActionResult> Login(LoginVM model)
	{
		if (ModelState.IsValid)
		{
			//login
			var result = await signInManager.PasswordSignInAsync(model.Username!, model.Password!, model.RememberMe, false);
            if (result.Succeeded)
            {
                return RedirectToAction("Index", "Home");
            } else
            {
                ModelState.AddModelError("", "Invalid login attempt.");
            }

		}
        return View(model);
	}

	public IActionResult Register()  //这个是必须有的，不然Register.cshtml页面不显示 
	{
        return View(); 
    }

	[HttpPost]
	public async Task<IActionResult> Register(RegisterVM model)
    {
        if (ModelState.IsValid)
        {
            AppUser appUser = new()
            {
                Name = model.Name,
                UserName = model.Email,
                Email = model.Email,
                Address = model.Address,

            };
            var result = await userManager.CreateAsync(appUser, model.Password!);
            if (result.Succeeded)
            {
                await signInManager.SignInAsync(appUser, false);
                return RedirectToAction("Index", "Home");
            }
            foreach(var err in result.Errors)
            {
                ModelState.AddModelError("", err.Description);
            }
        }
		return View(model);
    }

    public async Task<IActionResult> Logout()
    {
        await signInManager.SignOutAsync();
        return RedirectToAction("Index","Home");
    }
}

11.在view目录新增目录Account并增加2个view
Login和Regist，详细内容参考工程

12.在Shared目录下的_Layout.cshtml里加
                    @* 新增菜单用于登陆和注册 *@
                    <partial name="_LoginPartial" />
并且在同目录新增文件：_LoginPartial.cshtml


添加Identity时，选中loging, logout, register并添加到项目里的后，需要接着做：
1.在view目录下添加Account目录，并在目录下添加Login.cshtml和Register.cshtml两个文件，这两个文件用于显示登陆和注册新用户，详细文件内容可以参考现在有文件
2.在controller目录添加AccountController.cs
3.在Layout.csthml添加适应代码用于登陆。现在有工程是在这个文件添加了
            @* 新增菜单用于登陆和注册 *@
            <partial name="_LoginPartial" />
并且在shared目录下增加了_LoginPartial.cshtml文件
4.在需要验证的controller或者controller里的方法上加[Authorize]，那么访问这个controller或者方法时会自动验证是否登陆了，如果不是则会跳转到登陆页面。但是layout文件可以正常打开

